#4 - Programmation modulaire et objet avec es6 et typescript 
Objectif :
    • mieux structurer un code existant, le rendre plus "orienté objet" et avoir de bonnes bases pour aborder ultérieurement certains frameworks évolués tels que "angular" .
Contenu :
- langage typescript (tsc , tsconfig.json, types , ...)
- autres apports de es2015/typescript (lambda=arrow function, map, template-string, generics, ...)
- typescript orienté objet (class, extends, interface, constructor, abstract, ...)
- modules es2015/typescript (avec application coté client et coté serveur)
- notion de "bundle" et présentation de webpack (démos ou …)
- javascript asynchrones (Promise es2015 , async/await es2017)
- tests unitaires (mocha, ...) avec Promise et/ou async/await
- code nodeJs bien structuré avec "data-service" (dao asynchrones) , errorHandler , ...
- librairie de définitions (avec types précis) pour aider à obtenir une bonne auto-complétion.

****************************************************************************
***********  TP ************************************************************


0a. installation de nodeJs et npm (si nécessaire)
si node -v et npm -v se sont pas des commandes reconnues (dans CMD)
alors télécharger et installer nodeJs (pour windows 64 bits).
relancer ensuite une nouvelle fenêtre CMD et npm -v .

0b. installation de typescript (si nécessaire)
si tsc -v est une commande inconnue (dans CMD),
alors lancer 
npm install -g typescript


2a. premiers pas avec typescript
dans c:\temp (ou ailleurs) créer un nouveau répertoire "tp-ts"
via nodepad++ ou bien visual-studio-code écrire un petit fichier f1.ts
en y déclarant une variable x de type :number , affectant 18 à x 
et affichant x via console.log() .
compiler/transipler f1.ts en f1.js via tsc
exécuter node f1.js

2b. typescript en mode "projet":
créer ensuite les sous répertoires "tp-ts/src" et "tp-ts/dist"
déplacer f1.ts dans "tp-ts/scr" et supprimer f1.js
dans un terminal "CMD" , se placer dans c:\temp\tp-ts et lancer la commande
tsc --init
modifier ensuite le fichier tsconfig.json en 
décommentant "outDir" : et modifiant la valeur: "outDir": "dist" .
sauvegarder ensuite le fichier tsconfig
Ouvrir ensuite l'ensemble du "folder" tp-ts via l'éditeur "visual-studio-code"
dans tp-ts/src , créer un nouveau fichier f2.ts
y déclarer un tableau de string (avec quelques valeurs)
via for(...of...) boucler sur les valeurs du tableau de façon à 
appliquer .toUppercase() et effectuer un affichage via console.log()
Ouvrir un nouveau terminal (dans visual-studio-code) et y lancer la commande
"tsc" ou bien "tsc -w" .
Les 2 fichiers f1.js et f2.js doivent normalement être générés dans tp-ts/dist.
Dans encore un autre nouveau terminal, lancer node dist/f2.js
pour exécuter le code

2c. typescript en mode "orienté objet"
dans tp-ts/src (à coté de f1.ts et f2.ts) créer un nouveau fichier personne.ts
comportant une classe Personne ayant les attributs nom , prenom et age .
coder et tester plein de versions successives (sans puis avec constructeur, ...)

2d. tester héritage typescript via classe "Empoye" (dans personne.ts)
héritant de "Personne" avec un numero et un salaire en plus.

2e. ajouter les nouveaux fichiers test_pers_emp.ts et employe.ts
puis réorganiser le code via des import/export et des couper/coller.
tester l'exécution via node dist/test_pers_emp.js
	